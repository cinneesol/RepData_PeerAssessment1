g+geom_point(aes(colour=RetailOrTrade),size=3) + geom_line(aes(colour=RetailOrTrade),size=1.1,linetype=)
g+geom_point(aes(colour=RetailOrTrade),size=3) + geom_line(aes(colour=RetailOrTrade),size=1.1)
g+geom_point(aes(colour=RetailOrTrade),size=3) + geom_line(aes(colour=RetailOrTrade),size=1)
g+geom_point(aes(colour=RetailOrTrade),size=5) + geom_line(aes(colour=RetailOrTrade),size=1)
rm(list=ls()); load('d:\\Autolytix\\Data\\RV\\outDf.RData')
rm(list=ls()); load('d:\\Autolytix\\Data\\RV\\outDf.RData'); load('d:\\Autolytix\\Data\\RV\\SAVEMARKDOWN.RData')
save(SAVEMARKDOWN,file=paste0(DRIVE,'\\Autolytix\\Data\\RV\\SAVEMARKDOWN.RData'))
SAVEMARKDOWN <-TRUE
save(SAVEMARKDOWN,file=paste0(DRIVE,'\\Autolytix\\Data\\RV\\SAVEMARKDOWN.RData'))
DRIVE <-'D:'
save(SAVEMARKDOWN,file=paste0(DRIVE,'\\Autolytix\\Data\\RV\\SAVEMARKDOWN.RData'))
rm(list=ls()); load('d:\\Autolytix\\Data\\RV\\outDf.RData'); load('d:\\Autolytix\\Data\\RV\\SAVEMARKDOWN.RData')
vbrand<-substr(as.character(outDf.all$ADG),1,3)
vrange<-substr(as.character(outDf.all$ADG),4,5)
outDf.all<-data.frame(BRAND=vbrand,RANGE=vrange,outDf.all,stringsAsFactors=FALSE)
#rm(list=ls())
#load('d:\\Autolytix\\Data\\RV\\outDf.RData')
################ PERFORM TOP DOWN REGRESSION - HERE WE ONLY LOOK AT FILLED VALUES IN THE DATASET
##### There is s big drop in the first year, not entirely explainable by exponential function.
###### FOr retail fit the model STARTING AT YEAR 1 perform non linear regression for the rest of the y's
#require(minpack.lm)
# putFormula<-function(x,sigma,r,strike,putMult,mat,constant)
# {
#   d1<-1/sigma/sqrt(mat)*(log(x/strike)+(r+(sigma^2)/2)*mat)
#   d2<-d1-sigma*sqrt(mat)
#
#   result<- -x*pnorm(-d1) +strike*exp(-r*mat)*pnorm(-d2)
#   result<-result*putMult+constant
# }
# plot(0:14,putFormula(0:14,sigma=0.3,r=0.1,strike=10,putMult=1/15,mat=1,constant=0.3),type='l')
# print(putFormula(0,sigma=0.5,r=0.1,strike=10,putMult=1/10,mat=1,constant=0.2))
putFormula<-function(x,sigma,strike,putMult,constant)
{
d1<-1/sigma*(log(x/strike)+((sigma^2)/2))
d2<-d1-sigma
result<- -x*pnorm(-d1) +strike*pnorm(-d2)
result<-result*putMult+constant
}
optForm<-function(parms,xyRetail,xyTrade)
{
sigma<-exp(parms[1])
strike<-exp(parms[2])
putMult<-exp(parms[3])
constant<-exp(parms[4])
yRetail<-putFormula(xyRetail$x,sigma,strike,putMult,constant)
#   sigma<-parms[5]
#   strike<-parms[6]
#   putMult<-parms[7]
#   constant<-parms[8]
#   sigma<-parms[5]
#   strike<-parms[6]
putMult<-exp(parms[5])
constant<-exp(parms[6])
yTrade<-putFormula(xyTrade$x,sigma,strike,putMult,constant)
sse<-c((xyRetail$y-yRetail),(xyTrade$y-yTrade))
sse<-mean(sse^2)
### Add errors where Trade is higher than retail
xUnique<-unique(c(xyRetail$x,xyTrade$x))
sigma<-exp(parms[1])
strike<-exp(parms[2])
putMult<-exp(parms[3])
constant<-exp(parms[4])
yRetail<-putFormula(xUnique,sigma,strike,putMult,constant)
#   sigma<-parms[5]
#   strike<-parms[6]
#   putMult<-parms[7]
#   constant<-parms[8]
putMult<-exp(parms[5])
constant<-exp(parms[6])
yTrade<-putFormula(xUnique,sigma,strike,putMult,constant)
ix<-which(yTrade>yRetail)
meanLarger<-0
if(length(ix)>0) meanLarger<-mean(yTrade[ix]-yRetail[ix])
sse<-sse+meanLarger
### Add increased absolute discountingerror
#         if(length(yRetail)>1)
#         {
#                 discEndToStart<-(yRetail[length(yRetail)]-yTrade[length(yRetail)])-
#                         (yRetail[1]-yTrade[1])
#                 if(discEndToStart>0) sse<-sse+discEndToStart
#         }
return(sse)
}
######## START CURVE FITTING
#### SETUP GLOBAL PARAMETERS
parms<-c(c(log(0.5),log(5),log(1/30),log(0.1),log(1/30),log(0.05)))
maxErr<-0.1 ##### For kicking out by ADG fits
nToAvg<-10  ##### for averaging kick out ADGs
startIx<-which(names(outDf.all)=='y1')
testMat<-outDf.all
x<-as.numeric(sapply(names(testMat)[(startIx):dim(testMat)[2]],gsub,pattern='y',replacement=''))
x.func<-1:20
minEntries<-20
maxYs<-data.frame(ADG=testMat$ADG,RETORTRADE=testMat$RETORTRADE,byAll=NA)
#### ALL LEVELS
allSplit<-split(testMat,testMat$RETORTRADE)
xyRetail<-data.frame(x=x,y=as.numeric(apply(allSplit$Retail[,(startIx):dim(testMat)[2]],2,median)))
xyTrade<-data.frame(x=x,y=as.numeric(apply(allSplit$Trade[,(startIx):dim(testMat)[2]],2,median)))
mod<-optim(parms,optForm,method='BFGS',xyRetail=xyRetail,xyTrade=xyTrade,control = list(maxit=10000,reltol=1e-5))
if(mod$convergence) stop('Top level not converged')
retailY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[3]),exp(mod$par[4]))
tradeY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[5]),exp(mod$par[6]))
plot(x.func,retailY,type='l',col='darkred',lwd=3,ylim=range(
c(retailY,tradeY,xyRetail$y,xyTrade$y)))
points(xyRetail$x,xyRetail$y,col='darkred')
lines(x.func,tradeY,col='darkblue',lwd=3)
points(xyTrade$x,xyTrade$y,col='darkblue',pch=6)
retailY
x.func
retailFitted<-data.frame(Year=x.func,Depreciation=retailY)
retailFitted
tradeFitted<-data.frame(Year=x.func,Depreciation=tradeY)
load(paste0(DRIVE,'\\Autolytix\\Data\\RV\\outDf.RData'))
DRIVE <- 'D:'
DRIVE <- 'D:'
load(paste0(DRIVE,'\\Autolytix\\Data\\RV\\outDf.RData'))
load(paste0(DRIVE,'\\Autolytix\\Data\\RV\\SAVEMARKDOWN.RData'))
rm(list=ls())
DRIVE <- 'D:'
load(paste0(DRIVE,'\\Autolytix\\Data\\RV\\outDf.RData'))
load(paste0(DRIVE,'\\Autolytix\\Data\\RV\\SAVEMARKDOWN.RData'))
vbrand<-substr(as.character(outDf.all$ADG),1,3)
vrange<-substr(as.character(outDf.all$ADG),4,5)
outDf.all<-data.frame(BRAND=vbrand,RANGE=vrange,outDf.all,stringsAsFactors=FALSE)
#rm(list=ls())
#load('d:\\Autolytix\\Data\\RV\\outDf.RData')
################ PERFORM TOP DOWN REGRESSION - HERE WE ONLY LOOK AT FILLED VALUES IN THE DATASET
##### There is s big drop in the first year, not entirely explainable by exponential function.
###### FOr retail fit the model STARTING AT YEAR 1 perform non linear regression for the rest of the y's
#require(minpack.lm)
# putFormula<-function(x,sigma,r,strike,putMult,mat,constant)
# {
#   d1<-1/sigma/sqrt(mat)*(log(x/strike)+(r+(sigma^2)/2)*mat)
#   d2<-d1-sigma*sqrt(mat)
#
#   result<- -x*pnorm(-d1) +strike*exp(-r*mat)*pnorm(-d2)
#   result<-result*putMult+constant
# }
# plot(0:14,putFormula(0:14,sigma=0.3,r=0.1,strike=10,putMult=1/15,mat=1,constant=0.3),type='l')
# print(putFormula(0,sigma=0.5,r=0.1,strike=10,putMult=1/10,mat=1,constant=0.2))
putFormula<-function(x,sigma,strike,putMult,constant)
{
d1<-1/sigma*(log(x/strike)+((sigma^2)/2))
d2<-d1-sigma
result<- -x*pnorm(-d1) +strike*pnorm(-d2)
result<-result*putMult+constant
}
optForm<-function(parms,xyRetail,xyTrade)
{
sigma<-exp(parms[1])
strike<-exp(parms[2])
putMult<-exp(parms[3])
constant<-exp(parms[4])
yRetail<-putFormula(xyRetail$x,sigma,strike,putMult,constant)
#   sigma<-parms[5]
#   strike<-parms[6]
#   putMult<-parms[7]
#   constant<-parms[8]
#   sigma<-parms[5]
#   strike<-parms[6]
putMult<-exp(parms[5])
constant<-exp(parms[6])
yTrade<-putFormula(xyTrade$x,sigma,strike,putMult,constant)
sse<-c((xyRetail$y-yRetail),(xyTrade$y-yTrade))
sse<-mean(sse^2)
### Add errors where Trade is higher than retail
xUnique<-unique(c(xyRetail$x,xyTrade$x))
sigma<-exp(parms[1])
strike<-exp(parms[2])
putMult<-exp(parms[3])
constant<-exp(parms[4])
yRetail<-putFormula(xUnique,sigma,strike,putMult,constant)
#   sigma<-parms[5]
#   strike<-parms[6]
#   putMult<-parms[7]
#   constant<-parms[8]
putMult<-exp(parms[5])
constant<-exp(parms[6])
yTrade<-putFormula(xUnique,sigma,strike,putMult,constant)
ix<-which(yTrade>yRetail)
meanLarger<-0
if(length(ix)>0) meanLarger<-mean(yTrade[ix]-yRetail[ix])
sse<-sse+meanLarger
### Add increased absolute discountingerror
#         if(length(yRetail)>1)
#         {
#                 discEndToStart<-(yRetail[length(yRetail)]-yTrade[length(yRetail)])-
#                         (yRetail[1]-yTrade[1])
#                 if(discEndToStart>0) sse<-sse+discEndToStart
#         }
return(sse)
}
######## START CURVE FITTING
#### SETUP GLOBAL PARAMETERS
parms<-c(c(log(0.5),log(5),log(1/30),log(0.1),log(1/30),log(0.05)))
maxErr<-0.1 ##### For kicking out by ADG fits
nToAvg<-10  ##### for averaging kick out ADGs
startIx<-which(names(outDf.all)=='y1')
testMat<-outDf.all
x<-as.numeric(sapply(names(testMat)[(startIx):dim(testMat)[2]],gsub,pattern='y',replacement=''))
x.func<-1:20
minEntries<-20
maxYs<-data.frame(ADG=testMat$ADG,RETORTRADE=testMat$RETORTRADE,byAll=NA)
#### ALL LEVELS
allSplit<-split(testMat,testMat$RETORTRADE)
xyRetail<-data.frame(x=x,y=as.numeric(apply(allSplit$Retail[,(startIx):dim(testMat)[2]],2,median)))
xyTrade<-data.frame(x=x,y=as.numeric(apply(allSplit$Trade[,(startIx):dim(testMat)[2]],2,median)))
mod<-optim(parms,optForm,method='BFGS',xyRetail=xyRetail,xyTrade=xyTrade,control = list(maxit=10000,reltol=1e-5))
if(mod$convergence) stop('Top level not converged')
retailY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[3]),exp(mod$par[4]))
tradeY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[5]),exp(mod$par[6]))
plot(x.func,retailY,type='l',col='darkred',lwd=3,ylim=range(
c(retailY,tradeY,xyRetail$y,xyTrade$y)))
points(xyRetail$x,xyRetail$y,col='darkred')
lines(x.func,tradeY,col='darkblue',lwd=3)
points(xyTrade$x,xyTrade$y,col='darkblue',pch=6)
###### save the data
retailFitted<-data.frame(Year=x.func,Depreciation=retailY)
tradeFitted<-data.frame(Year=x.func,Depreciation=tradeY)
#Write the files
write.csv(exampleSetPOSTDEPR,paste0(DRIVE,'\\Autolytix\\Data\\RV\\retailFitted.csv'),row.names = FALSE)
write.csv(exampleSetPOSTFACT,paste0(DRIVE,'\\Autolytix\\Data\\RV\\tradeFitted.csv'),row.names = FALSE)
write.csv(retailFitted,paste0(DRIVE,'\\Autolytix\\Data\\RV\\retailFitted.csv'),row.names = FALSE)
write.csv(tradeFitted,paste0(DRIVE,'\\Autolytix\\Data\\RV\\tradeFitted.csv'),row.names = FALSE)
##### Get estimate of maximum depreciation value
allRetailMaxInfered<-retailY[length(x.func)]
allTradeMaxInfered<-tradeY[length(x.func)]
ix<-which(maxYs$RETORTRADE=='Retail')
maxYs[ix,'byAll']<-allRetailMaxInfered
ix<-which(maxYs$RETORTRADE=='Trade')
maxYs[ix,'byAll']<-allTradeMaxInfered
#### calc final values by type
calcFinValByType<-function(splitList,allRetailMaxInf,allTradeMaxInf)
{
retVals<-lapply(splitList,function(inType)
{
thisType<-split(inType,inType$RETORTRADE)
#### Get the median value
if(dim(inType)[1]< minEntries)
{
retailDf<-data.frame(ADG=thisType$Retail$ADG,
RETORTRADE=thisType$Retail$RETORTRADE,val=NA,
stringsAsFactors=FALSE)
tradeDf<-data.frame(ADG=thisType$Trade$ADG,
RETORTRADE=thisType$Trade$RETORTRADE,val=NA,
stringsAsFactors=FALSE)
outDf<-rbind(retailDf,tradeDf)
return(outDf)
}else
{
xyRetail<-data.frame(x=x,y=as.numeric(apply(thisType$Retail[,(startIx):dim(testMat)[2]],2,median)))
xyTrade<-data.frame(x=x,y=as.numeric(apply(thisType$Trade[,(startIx):dim(testMat)[2]],2,median)))
mod<-NULL
try({
mod<-optim(parms,optForm,method='BFGS',xyRetail=xyRetail,xyTrade=xyTrade,control = list(maxit=10000,reltol=1e-5))
if(mod$convergence) stop('Top level not converged')
retailY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[3]),exp(mod$par[4]))
tradeY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[5]),exp(mod$par[6]))
plot(x.func,retailY,type='l',col='darkred',lwd=3,ylim=range(
c(retailY,tradeY,xyRetail$y,xyTrade$y)))
points(xyRetail$x,xyRetail$y,col='darkred')
lines(x.func,tradeY,col='darkblue',lwd=3)
points(xyTrade$x,xyTrade$y,col='darkblue',pch=6)
#scan(n=1)
allRetailMaxInfered<-retailY[length(x.func)]
allTradeMaxInfered<-tradeY[length(x.func)]
retailDf<-data.frame(ADG=thisType$Retail$ADG,
RETORTRADE=thisType$Retail$RETORTRADE,val=allRetailMaxInfered,stringsAsFactors=FALSE)
tradeDf<-data.frame(ADG=thisType$Trade$ADG,
RETORTRADE=thisType$Trade$RETORTRADE,val=allTradeMaxInfered,stringsAsFactors=FALSE)
outDf<-rbind(retailDf,tradeDf)
return(outDf)})
{
retailDf<-data.frame(ADG=thisType$Retail$ADG,
RETORTRADE=thisType$Retail$RETORTRADE,val=NA,stringsAsFactors=FALSE)
tradeDf<-data.frame(ADG=thisType$Trade$ADG,
RETORTRADE=thisType$Trade$RETORTRADE,val=NA,stringsAsFactors=FALSE)
outDf<-rbind(retailDf,tradeDf)
return(outDf)
}
}
})
retVals<-rbindlist(retVals)
retVals$ADG<-as.character(retVals$ADG)
retVals
}
#### BY COUNTRY
byCountry<-split(testMat,testMat$Country)
maxYVals<-calcFinValByType(byCountry,allRetailMaxInfered,allTradeMaxInfered)
setnames(maxYVals,'val','byCountry')
str(maxYVals)
## Now populate by adg and ret/trade
maxYs<-merge(maxYs,maxYVals,by=c('ADG','RETORTRADE'))
#### BY BRAND
byBrand<-split(testMat,testMat$BRAND)
maxYVals<-calcFinValByType(byBrand,allRetailMaxInfered,allTradeMaxInfered)
setnames(maxYVals,'val','byBrand')
## Now populate by adg and ret/trade
maxYs<-merge(maxYs,maxYVals,by=c('ADG','RETORTRADE'))
#### BY RANGE
byRange<-list()
cnt<-1
for(i in 1:length(byBrand))
{
brnds<-byBrand[[i]]
rnges<-split(brnds,brnds$RANGE)
for(j in 1:length(rnges))
{
byRange[[cnt]]<-rnges[[j]]
cnt<-cnt+1
}
}
maxYVals<-calcFinValByType(byRange,allRetailMaxInfered,allTradeMaxInfered)
setnames(maxYVals,'val','byRange')
## Now populate by adg and ret/trade
maxYs<-merge(maxYs,maxYVals,by=c('ADG','RETORTRADE'))
maxYs<-maxYs[order(maxYs$RETORTRADE,maxYs$ADG),]
##### NOW CALCULATE THE MEDIAN OF THE FINAL VALUES
a<-as.numeric(apply(maxYs[,3:dim(maxYs)[2]],1,median,na.rm=TRUE))
maxYs<-data.frame(maxYs,MAXMEDIAN=a,stringsAsFactors=FALSE)
##### NOW DO FOR EACH ADG
testMat2<-data.frame(ADG=as.character(testMat$ADG), RETORTRADE=as.character(testMat$RETORTRADE),
testMat[,startIx:dim(testMat)[2]],stringsAsFactors=FALSE)
testMat2<-merge(testMat2,maxYs[,c('ADG','RETORTRADE','MAXMEDIAN')],by=c('ADG','RETORTRADE'))
names(testMat2)[length(testMat2)]<-paste0('y',x.func[length(x.func)])
testMat<-testMat2
startIx<-which(names(testMat)=='y1')
x<-as.numeric(sapply(names(testMat)[(startIx):dim(testMat)[2]],gsub,pattern='y',replacement=''))
ADGUnique<-as.character(unique(testMat$ADG))
outYs<-matrix(NA,nrow=dim(testMat)[1],ncol=length(x.func))
for(i in 1:length(ADGUnique))
{
ADG<-ADGUnique[i]
ix<-which(testMat$ADG==ADG)
xyRetail<-data.frame(x=x,y=as.numeric(testMat[ix[1],(startIx):dim(testMat)[2]]))
xyTrade<-data.frame(x=x,y=as.numeric(testMat[ix[2],(startIx):dim(testMat)[2]]))
mod<-optim(parms,optForm,method='BFGS',xyRetail=xyRetail,xyTrade=xyTrade,control = list(maxit=10000,reltol=1e-5))
#if(mod$convergence) stop('Top level not converged')
if(mod$convergence>1)
{
#ixsNotSolved[cnt]<-ADG
#cnt<-cnt+1
cat(ADG,' not converged\n')
}else
{
retailY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[3]),exp(mod$par[4]))
tradeY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[5]),exp(mod$par[6]))
RetailErrs<-max(abs(retailY[xyRetail$x]-xyRetail$y))
TradeErrs<-max(abs(tradeY[xyTrade$x]-xyTrade$y))
#                 if(retailY[1]>=1||tradeY[1]>=1)
#                 {
# #                         ixsNotSolved[cnt]<-ADG
# #                         cnt<-cnt+1
#                         cat(ADG,' funny init nums\n')
#                 }else if(RetailErrs>maxErr||TradeErrs>maxErr)
#                 {
# #                         ixsNotSolved[cnt]<-ADG
# #                         cnt<-cnt+1
#                         cat(ADG,' Large Errors\n')
#
#                 }else
if(RetailErrs>maxErr||TradeErrs>maxErr||retailY[length(retailY)]<tradeY[length(tradeY)])
{
cat(ADG,' Large Errorsor weird end values\n')
#scan(n=1)
}else
{
outYs[ix[1],]<-retailY
outYs[ix[2],]<-tradeY
plot(x.func,retailY,type='l',col='darkred',lwd=3,ylim=range(
c(retailY,tradeY,xyRetail$y,xyTrade$y)))
points(xyRetail$x,xyRetail$y,col='darkred')
lines(x.func,tradeY,col='darkblue',lwd=3)
points(xyTrade$x,xyTrade$y,col='darkblue',pch=6)
title(paste0(i,":",ADG))
}
}
}
##### NOW DETERMINE THE VALUES OF THE ADGs THAT COULD NOT BE FIT
outYs.df<-data.frame(ADG=testMat2$ADG,RETORTRADE=testMat2$RETORTRADE,outYs,stringsAsFactors=FALSE)
outYs.split<-split(outYs.df,outYs.df$RETORTRADE)
retailYs<-outYs.split$Retail
tradeYs<-outYs.split$Trade
rm(outYs.split)
testMat2.split<-split(testMat2,testMat2$RETORTRADE)
testMat2.retail<-data.frame(Index=1:dim(testMat2.split$Retail)[1],testMat2.split$Retail,stringsAsFactors=FALSE)
testMat2.trade<-data.frame(Index=1:dim(testMat2.split$Trade)[1],testMat2.split$Trade,stringsAsFactors=FALSE)
rm(testMat2.split)
if(!identical(as.character(retailYs$ADG),as.character(testMat2.retail$ADG))) stop('Matrices not identical')
##### Get the indices of NAs
startIx<-which(names(testMat2.retail)=='y1')
ix<-which(is.na(retailYs[,3]))
ADGs<-retailYs$ADG[ix]
ixValid<-(1:dim(testMat2.retail)[1])[-ix]
##### Fit the retail nums
for(i in 1:length(ADGs))
{
ADG<-ADGs[i]
ixOut<-which(retailYs$ADG==ADG)
ixtestMatRet<-which(testMat2.retail$ADG==ADG)
ixtestMatTrde<-which(testMat2.trade$ADG==ADG)
if(ixtestMatRet!=ixtestMatTrde) stop("Not expected")
refVecRet<-as.numeric(testMat2.retail[ixtestMatRet,startIx:dim(testMat2.retail)[2]])
refVecTrde<-as.numeric(testMat2.trade[ixtestMatRet,startIx:dim(testMat2.retail)[2]])
retailDists<-apply(testMat2.retail[ixValid,],1,function(rw)
{
dist<-sqrt(sum(as.numeric(rw[startIx:dim(testMat2.retail)[2]])-refVecRet)^2)
retdf<-data.frame(ADG=rw['ADG'],EuclDist=dist)
retdf
})
retailDists<-rbindlist(retailDists)
retailDists<-retailDists[order(retailDists$EuclDist),]
retailDists$ADG<-as.character(retailDists$ADG)
tradeDists<-apply(testMat2.trade[ixValid,],1,function(rw)
{
dist<-sqrt(sum(as.numeric(rw[startIx:dim(testMat2.retail)[2]])-refVecTrde)^2)
retdf<-data.frame(ADG=rw['ADG'],EuclDist=dist)
retdf
})
tradeDists<-rbindlist(tradeDists)
tradeDists<-tradeDists[order(tradeDists$EuclDist),]
tradeDists$ADG<-as.character(tradeDists$ADG)
topRetail<-median(retailDists$EuclDist[1:nToAvg])
topTrade<-median(tradeDists$EuclDist[1:nToAvg])
if(topRetail<=topTrade) ADGList<-as.character(retailDists$ADG[1:nToAvg]) else ADGList<-as.character(tradeDists$ADG[1:nToAvg])
ixSet<-vapply(ADGList,function(x) which(retailYs$ADG==x),FUN.VALUE=numeric(1))
retVec<-as.numeric(apply(retailYs[ixSet,3:dim(retailYs)[2]],2,median))
trdeVec<-as.numeric(apply(tradeYs[ixSet,3:dim(retailYs)[2]],2,median))
xyRetail<-data.frame(x=x,y=as.numeric(testMat2.retail[ixOut,(startIx):dim(testMat2.retail)[2]]))
xyTrade<-data.frame(x=x,y=as.numeric(testMat2.trade[ixOut,(startIx):dim(testMat2.trade)[2]]))
#         mod<-optim(parms,optForm,method='BFGS',xyRetail=xyRetail,xyTrade=xyTrade,control = list(maxit=10000,reltol=1e-5))
#         retailY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[3]),exp(mod$par[4]))
#         tradeY<-putFormula(x.func,exp(mod$par[1]),exp(mod$par[2]),exp(mod$par[5]),exp(mod$par[6]))
plot(x.func,retVec,type='l',col='darkred',lwd=3,ylim=range(
c(retVec,refVecRet,refVecTrde)))
points(x,refVecRet,col='darkred')
lines(x.func,trdeVec,col='darkblue',lwd=3)
points(x,refVecTrde,col='darkblue',pch=6)
title(paste0(i,":",ADG))
#         lines(x.func,retailY,col='darkgreen')
#         lines(x.func,tradeY,col='darkgray')
retailYs[ixOut,3:dim(retailYs)[2]]<-retVec
tradeYs[ixOut,3:dim(retailYs)[2]]<-trdeVec
#scan(n=1)
}
### WRITE FILES
##Retail
writeDf<-retailYs[,-2]
writeDf<-data.frame(writeDf[,1],y0=1,writeDf[,2:dim(writeDf)[2]])
names(writeDf)[1]<-'ADG'
names(writeDf)[3:dim(writeDf)[2]]<-paste0('y',x.func)
write.csv(writeDf,file=paste0('d:\\Autolytix\\Data\\RV\\','Retail.csv'))
##Trade
writeDf<-tradeYs[,-2]
writeDf<-data.frame(writeDf[,1],y0=1,writeDf[,2:dim(writeDf)[2]])
names(writeDf)[1]<-'ADG'
names(writeDf)[3:dim(writeDf)[2]]<-paste0('y',x.func)
write.csv(writeDf,file=paste0('d:\\Autolytix\\Data\\RV\\','Trade.csv'))
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/MarketPicture/MarketPicture.R', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/MarketPicture/MarketPicture.R', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/MarketPicture/MarketPicture.R', echo=TRUE)
source('Y:/IRD/Pieter/Quant/Sources/MachineLearningAndTrading/TechnicalIndicators/BernieChangePoint.r', echo=TRUE)
require(circlize)
setwd('D:\Courses\DataMining\DataVisualization\Assignment2')
require(circlize)
demo(circlize)
demo()
demo(package = circlize
)
demo(package = 'circlize')
demo(foo,package = 'circlize')
demo(foo,package = 'circlize')
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
debugSource('D:/Courses/DataScience/ReproducibleResearch/Assignment1/assignment1.r', echo=TRUE)
debugSource('D:/Courses/DataScience/ReproducibleResearch/Assignment1/assignment1.r', echo=TRUE)
# (y-axis). See the README file in the GitHub repository to see an example of what this plot should look
sum(newSteps!=0)
sum(newSteps==0)
